{"version":3,"file":"static/js/901.608a417f.chunk.js","mappings":"0KACA,GAAgB,QAAU,yBAAyB,WAAa,4BAA4B,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,KAAO,sBAAsB,SAAW,0BAA0B,cAAgB,gCCA7R,EAA+D,yB,SCU/D,EALgB,SAACA,GACb,IAAKC,EAAWD,EAAXC,QACL,OAAO,gBAAKC,UAAWC,EAAhB,SAA4BF,KCPvC,EAA+G,2BAA/G,EAAmJ,2BAAnJ,EAAqL,yB,UCkBrL,EAXmB,SAACD,GAChB,IAAKI,EAAYJ,EAAZI,KACDC,EAAO,YADML,EAANM,GAGX,OAAO,+BACH,gBAAKJ,UAAWC,EAAW,IAAMA,EAAjC,UACI,SAAC,KAAD,CAASI,GAAIF,EAAMH,UAAWC,EAAQK,gBAAiBL,EAAvD,SAAkEC,S,0FCyC9E,EAxCwC,SAAC,GAAe,IAAbK,EAAY,EAAZA,OAEjCC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXX,QAAS,IAEbY,kBAAkBC,EAAAA,EAAAA,GAAkB,WACpCC,SAAU,SAAAC,GACNP,EAAOO,EAAOf,SACdS,EAAOO,eAIf,OACI,gBAAKf,UAAWC,EAAAA,WAAhB,UACI,kBAAMG,GAAI,cAAeS,SAAUL,EAAOQ,aAA1C,WACI,0BACI,gBAAKZ,GAAI,sBAAuBJ,UAAWiB,EAAAA,EAAAA,WACtCC,QAAS,SAACC,GAAD,OAAOC,EAAAA,EAAAA,GAAYD,EAAGE,EAAAA,IAC/BC,OAAQ,SAACH,GAAD,OAAOC,EAAAA,EAAAA,GAAYD,EAAGI,EAAAA,KAFnC,UAGI,SAACC,EAAA,GAAD,QAAWxB,UAAWiB,EAAAA,EAAAA,WACXQ,KAAM,UAAWC,YAAa,qBAC9BtB,GAAG,gBACHuB,WAAS,EACTC,QAAS,IACLpB,EAAOqB,cAAc,kBAK5C,gBAAK7B,UAAW8B,EAAAA,EAAAA,YAAhB,UACI,mBAAQ1B,GAAI,cAAgBJ,UAAS,UAAK8B,EAAAA,EAAAA,YAAL,YAAuB7B,EAAAA,aAAiBwB,KAAM,SAAnF,kCCIpB,EAjCgB,SAAC3B,GACb,MAIIA,EAHAiC,YAAcC,EADlB,EACkBA,QAASC,EAD3B,EAC2BA,SACvBC,EAEApC,EAFAoC,YAMAC,GAJArC,EADAsC,OAGkBJ,EAAQK,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAD,CAA4BpC,KAAMoC,EAAOpC,KAAME,GAAIkC,EAAOlC,IAAzCkC,EAAOlC,OAE7C6B,EAASI,KAAI,SAAAtC,GAAO,OAAI,SAAC,EAAD,CAA0BA,QAASA,EAAQA,SAA7BA,EAAQK,QASrE,OACI,iBAAKJ,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,gBAIhB,iBAAKD,UAAWC,EAAAA,SAAhB,WACI,iBAAKD,UAAWC,EAAAA,cAAhB,cAAmCkC,EAAnC,QACA,SAAC,EAAD,CAAY5B,OAZT,SAACR,GACZmC,EAAYnC,a,qDCxBdwC,EAAkB,SAACC,GAAD,MAA+C,CACnEJ,OAAQI,EAAMC,YAAYL,SAgB9B,MAbC,SAA8BM,GAU3B,OAFqCC,EAAAA,EAAAA,IAAQJ,EAARI,EAPX,SAAC7C,GACvB,IAAKsC,EAAwBtC,EAAxBsC,OAAWQ,GAAhB,OAA6B9C,EAA7B,GAEA,OAAIsC,GACG,SAACM,GAAD,UAAeE,KADH,SAAC,KAAD,CAAUvC,GAAI,eC6BzC,GAAewC,EAAAA,EAAAA,KACVF,EAAAA,EAAAA,KAfmB,SAACH,GACrB,MAAO,CACHT,YAAaS,EAAMM,mBAIA,SAACC,GACxB,MAAO,CACHb,YAAa,SAACnC,GACVgD,GAASC,EAAAA,EAAAA,GAAyBjD,SAOzCkD,EAFL,CAGGC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/DialogForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__H5v5+\",\"dialogForm\":\"Dialogs_dialogForm__PP0n+\",\"dialogsItems\":\"Dialogs_dialogsItems__iumHU\",\"dialog\":\"Dialogs_dialog__ymoD5\",\"active\":\"Dialogs_active__D8u2D\",\"link\":\"Dialogs_link__rLzCH\",\"messages\":\"Dialogs_messages__iNOj8\",\"messagesBlock\":\"Dialogs_messagesBlock__b3owV\"};","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Message_messages__9KXmK\",\"message\":\"Message_message__E2GCR\"};","import s from './Message.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string,\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    let {message} = props;\r\n    return <div className={s.message}>{message}</div>\r\n}\r\n\r\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogItem_dialogs__J9fcc\",\"dialogsItems\":\"DialogItem_dialogsItems__9uTkF\",\"dialog\":\"DialogItem_dialog__c4G07\",\"active\":\"DialogItem_active__B55E1\",\"link\":\"DialogItem_link__g5RDd\"};","import s from './DialogItem.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string,\r\n    id: number,\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    let {name, id} = props;\r\n    let path = '/dialogs/' + id;\r\n\r\n    return <>\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={path} className={s.link} activeClassName={s.active}>{name}</NavLink>\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default DialogItem;","import React, {FocusEvent, useEffect} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {textareaValidator} from \"../../utils/validators\";\r\nimport cs from \"../common/common.module.css\";\r\nimport {accentColor, elementBgColor} from \"../../constants\";\r\nimport {Input, InputAdornment, TextField} from \"@mui/material\";\r\nimport PermIdentityIcon from \"@mui/icons-material/PermIdentity\";\r\nimport ls from \"../Login/Login.module.css\";\r\nimport s from \"../Dialogs/Dialogs.module.css\"\r\nimport {toggleFocus} from \"../../utils/forms\";\r\n\r\ntype PropsType = {\r\n    submit: (text: string) => void,\r\n}\r\n\r\nconst DialogForm: React.FC<PropsType> = ({ submit}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        validationSchema: textareaValidator('message'),\r\n        onSubmit: values => {\r\n            submit(values.message);\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div className={s.dialogForm}>\r\n            <form id={'dialog-form'} onSubmit={formik.handleSubmit}>\r\n                <div>\r\n                    <div id={'message-input-block'} className={cs.inputBlock}\r\n                         onFocus={(e) => toggleFocus(e, accentColor)}\r\n                         onBlur={(e) => toggleFocus(e, elementBgColor)}>\r\n                        <TextField className={cs.inputField}\r\n                                   type={\"message\"} placeholder={\"Enter your message\"}\r\n                                   id=\"message-input\"\r\n                                   multiline\r\n                                   maxRows={10}\r\n                                   {...formik.getFieldProps('message')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={ls.buttonBlock}>\r\n                    <button id={'sendMessage'}  className={`${ls.loginButton} ${s.sendMessage}`} type={'submit'}>\r\n                        Send message\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogForm;","import s from './Dialogs.module.css';\nimport Message from \"./Message/Message\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport {DialogType, MessageType} from './DialogsContainer'\nimport {Redirect} from \"react-router-dom\";\nimport DialogForm from \"./DialogForm\";\n\ntype DialogsPropsType = {\n    dialogsPage: {\n        dialogs: DialogType[],\n        messages: MessageType[],\n    },\n    newMessageBody: string,\n    sendMessage: (message: string) => void,\n    isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsPropsType) => {\n    const {\n        dialogsPage: {dialogs, messages},\n        sendMessage,\n        isAuth\n    } = props;\n\n    let dialogsElements = dialogs.map(dialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>);\n\n    let messagesElements = messages.map(message => <Message key={message.id} message={message.message}/>);\n\n    // должно быть !isAuth\n    // if (!isAuth) return <Redirect to={'/login'}/>\n\n    const submit = (message: string) => {\n        sendMessage(message);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {/*{dialogsElements}*/}\n            </div>\n\n            <div className={s.messages}>\n                <div className={s.messagesBlock}> {messagesElements} </div>\n                <DialogForm submit={submit}/>\n            </div>\n        </div>\n    );\n};\n\n\nexport default Dialogs;","import {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../state/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.authReducer.isAuth\r\n})\r\n\r\n function withAuthRedirect <T>(Component: React.ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if(!isAuth) return <Redirect to={'/login'} />\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent\r\n};\r\n\r\nexport default withAuthRedirect;","import {sendMessageActionCreator} from '../../state/reducers/dialogsReducer';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\r\n\r\nexport type DialogType = {\r\n    id: number,\r\n    name: string,\r\n}\r\n\r\nexport type MessageType = {\r\n    id: number,\r\n    message: string,\r\n}\r\n\r\ntype DialogsPageType = {\r\n    dialogs: DialogType[],\r\n    messages: MessageType[],\r\n\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType,\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (message: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsReducer,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (message: string) => {\r\n            dispatch(sendMessageActionCreator(message));\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n     connect(mapStateToProps, mapDispatchToProps),\r\n     withAuthRedirect\r\n )(Dialogs)\r\n\r\n"],"names":["props","message","className","s","name","path","id","to","activeClassName","submit","formik","useFormik","initialValues","validationSchema","textareaValidator","onSubmit","values","resetForm","handleSubmit","cs","onFocus","e","toggleFocus","accentColor","onBlur","elementBgColor","TextField","type","placeholder","multiline","maxRows","getFieldProps","ls","dialogsPage","dialogs","messages","sendMessage","messagesElements","isAuth","map","dialog","mapStateToProps","state","authReducer","Component","connect","restProps","compose","dialogsReducer","dispatch","sendMessageActionCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}
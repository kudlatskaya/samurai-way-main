{"version":3,"file":"static/js/759.47420a9b.chunk.js","mappings":"0KACA,GAAgB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,KAAO,sBAAsB,SAAW,0BAA0B,cAAgB,gCCAjN,EAA+D,yB,SCU/D,EALgB,SAACA,GACf,IAAMC,EAAYD,EAAZC,QACN,OAAO,gBAAKC,UAAWC,EAAhB,SAA4BF,K,0FCkDrC,EA5CwC,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACnCC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbN,QAAS,IAEXO,kBAAkBC,EAAAA,EAAAA,GAAkB,WACpCC,SAAU,SAACC,GACTP,EAAOO,EAAOV,SACdI,EAAOO,eAIX,OACE,gBAAKV,UAAWC,EAAAA,WAAhB,UACE,kBAAMU,GAAI,cAAeH,SAAUL,EAAOS,aAA1C,WACE,0BACE,gBACED,GAAI,sBACJX,UAAWa,EAAAA,EAAAA,WACXC,QAAS,SAACC,GAAD,OAAOC,EAAAA,EAAAA,GAAYD,EAAGE,EAAAA,IAC/BC,OAAQ,SAACH,GAAD,OAAOC,EAAAA,EAAAA,GAAYD,EAAGI,EAAAA,KAJhC,UAME,SAACC,EAAA,GAAD,QACEpB,UAAWa,EAAAA,EAAAA,WACXQ,KAAM,UACNC,YAAa,qBACbX,GAAG,gBACHY,WAAS,EACTC,QAAS,IACLrB,EAAOsB,cAAc,kBAK/B,gBAAKzB,UAAW0B,EAAAA,EAAAA,YAAhB,UACE,mBAAQf,GAAI,cAAeX,UAAS,UAAK0B,EAAAA,EAAAA,YAAL,YAAuBzB,EAAAA,aAAiBoB,KAAM,SAAlF,kCCHV,EA9BgB,SAACvB,GACf,MAIIA,EAHF6B,YAAwBC,GAD1B,EACiBC,QADjB,EAC0BD,UACxBE,EAEEhC,EAFFgC,YAMEC,GAJAjC,EADFkC,OAKqBJ,EAASK,KAAI,SAAClC,GAAD,OAAa,SAAC,EAAD,CAA0BA,QAASA,EAAQA,SAA7BA,EAAQY,QASvE,OACE,iBAAKX,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,gBAEhB,iBAAKD,UAAWC,EAAAA,SAAhB,WACE,iBAAKD,UAAWC,EAAAA,cAAhB,cAAmC8B,EAAnC,QACA,SAAC,EAAD,CAAY7B,OAVH,SAACH,GACd+B,EAAY/B,a,qDCvBVmC,EAAkB,SAACC,GAAD,MAA+C,CACrEH,OAAQG,EAAMC,YAAYJ,SAgB5B,MAbA,SAA6BK,GAU3B,OAFqCC,EAAAA,EAAAA,IAAQJ,EAARI,EAPX,SAACxC,GACzB,IAAMkC,EAAyBlC,EAAzBkC,OAAWO,GAAjB,OAA+BzC,EAA/B,GAEA,OAAKkC,GACE,SAACK,GAAD,UAAgBE,KADH,SAAC,KAAD,CAAUC,GAAI,eC4BtC,GAAeC,EAAAA,EAAAA,KAA6BH,EAAAA,EAAAA,KAdpB,SAACH,GACvB,MAAO,CACLR,YAAaQ,EAAMO,mBAII,SAACC,GAC1B,MAAO,CACLb,YAAa,SAAC/B,GACZ4C,GAASC,EAAAA,EAAAA,GAAyB7C,SAKkD8C,EAA1F,CAA4GC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsItems\":\"Dialogs_dialogsItems__iumHU\",\"dialog\":\"Dialogs_dialog__ymoD5\",\"active\":\"Dialogs_active__D8u2D\",\"link\":\"Dialogs_link__rLzCH\",\"messages\":\"Dialogs_messages__iNOj8\",\"messagesBlock\":\"Dialogs_messagesBlock__b3owV\"};","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Message_messages__9KXmK\",\"message\":\"Message_message__E2GCR\"};","import s from \"./Message.module.css\";\n\ntype MessagePropsType = {\n  message: string;\n};\n\nconst Message = (props: MessagePropsType) => {\n  let { message } = props;\n  return <div className={s.message}>{message}</div>;\n};\n\nexport default Message;\n","import React from \"react\";\nimport {useFormik} from \"formik\";\nimport {textareaValidator} from \"utils/validators\";\nimport cs from \"../common/common.module.css\";\nimport {accentColor, elementBgColor} from \"../../constants\";\nimport {TextField} from \"@mui/material\";\nimport ls from \"../Login/Login.module.css\";\nimport s from \"../Dialogs/Dialogs.module.css\";\nimport {toggleFocus} from \"utils/forms\";\n\ntype PropsType = {\n  submit: (text: string) => void;\n};\n\nconst DialogForm: React.FC<PropsType> = ({ submit }) => {\n  const formik = useFormik({\n    initialValues: {\n      message: \"\",\n    },\n    validationSchema: textareaValidator(\"message\"),\n    onSubmit: (values) => {\n      submit(values.message);\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <div className={s.dialogForm}>\n      <form id={\"dialog-form\"} onSubmit={formik.handleSubmit}>\n        <div>\n          <div\n            id={\"message-input-block\"}\n            className={cs.inputBlock}\n            onFocus={(e) => toggleFocus(e, accentColor)}\n            onBlur={(e) => toggleFocus(e, elementBgColor)}\n          >\n            <TextField\n              className={cs.inputField}\n              type={\"message\"}\n              placeholder={\"Enter your message\"}\n              id=\"message-input\"\n              multiline\n              maxRows={10}\n              {...formik.getFieldProps(\"message\")}\n            />\n          </div>\n        </div>\n\n        <div className={ls.buttonBlock}>\n          <button id={\"sendMessage\"} className={`${ls.loginButton} ${s.sendMessage}`} type={\"submit\"}>\n            Send message\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default DialogForm;\n","import s from \"./Dialogs.module.css\";\nimport Message from \"./Message/Message\";\nimport {DialogType, MessageType} from \"./DialogsContainer\";\nimport {Redirect} from \"react-router-dom\";\nimport DialogForm from \"./DialogForm\";\n\ntype DialogsPropsType = {\n  dialogsPage: {\n    dialogs: DialogType[];\n    messages: MessageType[];\n  };\n  newMessageBody: string;\n  sendMessage: (message: string) => void;\n  isAuth: boolean;\n};\n\nconst Dialogs = (props: DialogsPropsType) => {\n  const {\n    dialogsPage: { dialogs, messages },\n    sendMessage,\n    isAuth,\n  } = props;\n\n  // let dialogsElements = dialogs.map((dialog) => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id} />);\n\n  let messagesElements = messages.map((message) => <Message key={message.id} message={message.message} />);\n\n  // должно быть !isAuth\n  //  if (!isAuth) return <Redirect to={'/login'}/>\n\n  const submit = (message: string) => {\n    sendMessage(message);\n  };\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{/*{dialogsElements}*/}</div>\n\n      <div className={s.messages}>\n        <div className={s.messagesBlock}> {messagesElements} </div>\n        <DialogForm submit={submit} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import { Redirect } from \"react-router-dom\";\nimport { AppStateType } from \"state/redux-store\";\nimport { connect } from \"react-redux\";\n\ntype MapStateToPropsType = {\n  isAuth: boolean;\n};\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\n  isAuth: state.authReducer.isAuth,\n});\n\nfunction withAuthRedirect<T>(Component: React.ComponentType<T>) {\n  const RedirectComponent = (props: MapStateToPropsType) => {\n    let { isAuth, ...restProps } = props;\n\n    if (!isAuth) return <Redirect to={\"/login\"} />;\n    return <Component {...(restProps as T)} />;\n  };\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent);\n\n  return ConnectedAuthRedirectComponent;\n}\n\nexport default withAuthRedirect;\n","import { sendMessageActionCreator } from \"state/reducers/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"state/redux-store\";\nimport { compose, Dispatch } from \"redux\";\nimport withAuthRedirect from \"../../hoc/withAuthRedirect\";\n\nexport type DialogType = {\n  id: number;\n  name: string;\n};\n\nexport type MessageType = {\n  id: number;\n  message: string;\n};\n\ntype DialogsPageType = {\n  dialogs: DialogType[];\n  messages: MessageType[];\n};\n\ntype MapStateToPropsType = {\n  dialogsPage: DialogsPageType;\n};\n\ntype MapDispatchToPropsType = {\n  sendMessage: (message: string) => void;\n};\n\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\n  return {\n    dialogsPage: state.dialogsReducer,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    sendMessage: (message: string) => {\n      dispatch(sendMessageActionCreator(message));\n    },\n  };\n};\n\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs);\n"],"names":["props","message","className","s","submit","formik","useFormik","initialValues","validationSchema","textareaValidator","onSubmit","values","resetForm","id","handleSubmit","cs","onFocus","e","toggleFocus","accentColor","onBlur","elementBgColor","TextField","type","placeholder","multiline","maxRows","getFieldProps","ls","dialogsPage","messages","dialogs","sendMessage","messagesElements","isAuth","map","mapStateToProps","state","authReducer","Component","connect","restProps","to","compose","dialogsReducer","dispatch","sendMessageActionCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}
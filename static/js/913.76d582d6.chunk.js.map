{"version":3,"file":"static/js/913.76d582d6.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/Contacts/Contact.tsx","webpack://samurai-way/./src/components/Profile/ProfileData/ProfileData.module.css?a227","asets/images/edit.svg","components/Profile/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/ProfileDataForm/ProfileDataForm.module.css?dd16","components/Profile/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/MyPost.module.css?4339","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/Post/PostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Avatar/Avatar.module.css?e036","webpack://samurai-way/./src/components/Profile/ProfileStatus/ProfileStatus.module.css?1f32","components/Profile/ProfileStatus/ProfileStatus.tsx","asets/images/editPoint.svg","components/Profile/Avatar/Avatar.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userName\":\"ProfileInfo_userName__HUfIF\",\"userInfo\":\"ProfileInfo_userInfo__B7ncH\",\"content\":\"ProfileInfo_content__WvIkr\",\"img\":\"ProfileInfo_img__sOWJz\",\"edit\":\"ProfileInfo_edit__pO3h5\"};","type ContactPropsType = {\r\n    contactTitle: string | null\r\n    contactValue: string | null\r\n}\r\n// const MyInput = ({ field, form, ...props }) => {\r\n//     return <input {...field} {...props} />;\r\n// };\r\n const Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return (\r\n        <tr>\r\n            <td>{contactTitle}: </td> <td>{contactValue}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default Contact","// extracted by mini-css-extract-plugin\nexport default {\"userInfo\":\"ProfileData_userInfo__6Mdf2\",\"edit\":\"ProfileData_edit__cWAkh\"};","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgEdit(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    stroke: \"#838daa\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7 7H6a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2-2v-1\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.385 6.585a2.1 2.1 0 0 0-2.97-2.97L9 12v3h3zM16 5l3 3\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEdit);\nexport default __webpack_public_path__ + \"static/media/edit.b96db9c8079a9d0f5502e0804b93b4c7.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport Contact from \"../Contacts/Contact\";\r\nimport {ContactsType, ProfileType} from \"../ProfileContainer\";\r\nimport s from './ProfileData.module.css';\r\nimport edit from '../../../asets/images/edit.svg';\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean,\r\n    activateEditMode: () => void\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, activateEditMode}: ProfileDataType) => {\r\n\r\n    return (\r\n        <div className={s.userInfo}>\r\n\r\n            <table>\r\n                <tr>\r\n                    <td>Full name:</td>\r\n                    <td>{profile?.fullName}</td>\r\n\r\n                </tr>\r\n                <tr>\r\n                    <td>Looking for a job:</td>\r\n                    <td>{profile?.lookingForAJob ? 'yes' : 'no'}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>My professional skills:</td>\r\n                    <td>{profile?.lookingForAJobDescription}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>About me:</td>\r\n                    <td>{profile?.aboutMe}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td colSpan={2}><b>Contacts</b></td>\r\n                </tr>\r\n                {\r\n                    profile?.contacts && Object.keys(profile.contacts).map(key =>\r\n                        <Contact key={key} contactTitle={key}\r\n                                 contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                    )\r\n                }\r\n            </table>\r\n            <div>\r\n                {\r\n                    isOwner && <div>\r\n                        <button className={s.edit} onClick={activateEditMode}>\r\n                            <img src={edit} alt=\"\"/>\r\n                        </button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileData;","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"ProfileDataForm_checkbox__q2iYW\",\"formErrors\":\"ProfileDataForm_formErrors__2zuLP\",\"label\":\"ProfileDataForm_label__nw7wG\",\"item\":\"ProfileDataForm_item__LTiRE\",\"input\":\"ProfileDataForm_input__ul3JR\",\"button\":\"ProfileDataForm_button__+8Sdm\",\"contacts\":\"ProfileDataForm_contacts__VQOet\"};","import {ProfileType} from \"../ProfileContainer\";\r\nimport {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {createErrorsObject} from \"../../../utils/object-helpers\";\r\nimport cs from \"../../common/common.module.css\";\r\nimport {toggleFocus} from \"../../../utils/forms\";\r\nimport {accentColor, elementBgColor, iconColor} from \"../../../constants\";\r\nimport s from '../ProfileDataForm/ProfileDataForm.module.css'\r\nimport {Checkbox, FormControlLabel, TextField} from \"@mui/material\";\r\nimport ls from '../../Login/Login.module.css'\r\n\r\n// export type ProfileDataFormType = {\r\n//     contacts?: ContactsType | undefined | null\r\n//     fullName?: string | null\r\n//     lookingForAJob?: boolean | null\r\n//     lookingForAJobDescription?: string | null\r\n//     aboutMe?: string | null\r\n// }\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    submit: (values: ProfileType, setStatus: (status: any) => void) => void\r\n}\r\n\r\n\r\nconst ProfileDataForm = ({profile, submit}: ProfileDataFormPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={{\r\n                    userId: profile.userId,\r\n                    contacts: profile.contacts,\r\n                    fullName: profile.fullName || '',\r\n                    lookingForAJob: profile.lookingForAJob,\r\n                    lookingForAJobDescription: profile.lookingForAJobDescription || '',\r\n                    aboutMe: profile.aboutMe || ''\r\n                }}\r\n\r\n                onSubmit={(values: ProfileType, actions) => {\r\n                    submit(values as ProfileType, actions.setStatus)\r\n                    // actions.resetForm()\r\n                }}\r\n            >\r\n                {({\r\n                      errors,\r\n                      touched,\r\n                      status,\r\n                      values,\r\n                      handleChange\r\n                  }) => {\r\n\r\n                    let errorsList = createErrorsObject(profile)\r\n\r\n                    status?.errors.map((e: string) => {\r\n                        errorsList.map((el) => {\r\n                            e.toLowerCase().includes(el.toLowerCase()) /*&& console.log(el)*/ //fieldsError[key as keyof ProfileType]\r\n                        })\r\n                    })\r\n\r\n                    return (\r\n                        <Form>\r\n                            <div className={s.item}>\r\n                                <label className={s.label} htmlFor=\"fullName\">Full name:</label>\r\n                                {/*<Field id=\"fullName\" name=\"fullName\"/>*/}\r\n                                <div id='user-input-block' className={`${cs.inputBlock} ${s.input}`}\r\n                                     onFocus={(e) => toggleFocus(e, accentColor)}\r\n                                     onBlur={(e) => toggleFocus(e, elementBgColor)}>\r\n                                    <Field id=\"fullName\" className={cs.inputField} type=\"text\" name=\"fullName\"\r\n                                           placeholder={\"Enter user name\"}/>\r\n                                </div>\r\n                                {/*<ErrorMessage component=\"div\" name=\"fullName\" />*/}\r\n                            </div>\r\n\r\n                            <div className={s.item}>\r\n                                <label className={s.label} htmlFor=\"lookingForAJob\">Looking for a job: </label>\r\n                                <div className={s.checkbox}>\r\n                                    {/*<Field type=\"checkbox\" id=\"lookingForAJob\" name=\"lookingForAJob\"/>*/}\r\n                                    <FormControlLabel control={\r\n                                        <Checkbox defaultChecked name=\"lookingForAJob\" id=\"lookingForAJob\"\r\n                                                  checked={values.lookingForAJob}\r\n                                                  onChange={handleChange}\r\n                                                  sx={{\r\n                                                      color: iconColor,\r\n                                                      '&.Mui-checked': {\r\n                                                          color: elementBgColor,\r\n                                                          backgroundColor: accentColor\r\n                                                      },\r\n                                                  }}/>\r\n                                    } label=\"\" sx={{'& .MuiSvgIcon-root': {fontSize: 23}}}\r\n                                    />\r\n                                </div>\r\n\r\n                                {/*<ErrorMessage component=\"div\" name=\"lookingForAJob\" />*/}\r\n                                {/*{touched.lookingForAJob && errors.lookingForAJob ?*/}\r\n                                {/*    <div style={{color: 'red'}}>{status?.error}</div> : null}*/}\r\n                            </div>\r\n\r\n                            <div className={s.item}>\r\n                                <label className={s.label} htmlFor=\"lookingForAJobDescription\">My professional skills: </label>\r\n\r\n                                {/*<Field as=\"textarea\" id=\"lookingForAJobDescription\" name=\"lookingForAJobDescription\"/>*/}\r\n\r\n                                <div id={'skills-input-block'} className={`${cs.inputBlock} ${s.input}`}\r\n                                     onFocus={(e) => toggleFocus(e, accentColor)}\r\n                                     onBlur={(e) => toggleFocus(e, elementBgColor)}>\r\n                                    <TextField className={cs.inputField}\r\n                                               placeholder={\"Enter your skills\"}\r\n                                               id={\"lookingForAJobDescription\"}\r\n                                               value={values.lookingForAJobDescription}\r\n                                               multiline\r\n                                               maxRows={10}\r\n                                               name={'lookingForAJobDescription'}\r\n                                               onChange={handleChange}\r\n                                    />\r\n                                </div>\r\n                                {/*<ErrorMessage component=\"div\" name=\"lookingForAJobDescription\" />*/}\r\n\r\n                                {/*{touched.lookingForAJobDescription && errors.lookingForAJobDescription ?*/}\r\n                                {/*    <div style={{color: 'red'}}>{errors.lookingForAJobDescription}</div> : null}*/}\r\n                            </div>\r\n\r\n                            <div className={s.item}>\r\n                                <label className={s.label} htmlFor=\"aboutMe\">About me: </label>\r\n                                {/*<Field as=\"textarea\" id=\"aboutMe\" name=\"aboutMe\"/>*/}\r\n\r\n                                <div id={'about-input-block'} className={`${cs.inputBlock} ${s.input}`}\r\n                                     onFocus={(e) => toggleFocus(e, accentColor)}\r\n                                     onBlur={(e) => toggleFocus(e, elementBgColor)}>\r\n                                    <TextField className={cs.inputField}\r\n                                               placeholder={\"Enter your skills\"}\r\n                                               id={\"aboutMe\"}\r\n                                               value={values.aboutMe}\r\n                                               multiline\r\n                                               maxRows={10}\r\n                                               name={'aboutMe'}\r\n                                               onChange={handleChange}\r\n                                    />\r\n                                </div>\r\n\r\n                                {/*{touched.aboutMe && errors.aboutMe ?*/}\r\n                                {/*    <div style={{color: 'red'}}>{errors.aboutMe}</div> : null}*/}\r\n                            </div>\r\n\r\n                            <div className={s.contacts}>\r\n                                Contacts:\r\n                                {profile.contacts && Object.keys(profile.contacts).length > 0 && (\r\n                                    Object.keys(profile.contacts).map((key, index) => (\r\n\r\n                                        <div key={index} className={s.item}>\r\n                                            <label className={s.label} htmlFor={`${key}`}>{key}: </label>\r\n\r\n                                            {/*<Field key={index} id={`${key}`} name={`contacts.${key}`}/>*/}\r\n\r\n                                            <div key={index} className={`${cs.inputBlock} ${s.input} `}\r\n                                                 onFocus={(e) => toggleFocus(e, accentColor)}\r\n                                                 onBlur={(e) => toggleFocus(e, elementBgColor)}>\r\n                                                <Field id={`${key}`} className={cs.inputField} type=\"text\"\r\n                                                       name={`contacts.${key}`}\r\n                                                       placeholder={\"Enter your contact\"}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                )}\r\n                            </div>\r\n\r\n                            {status?.errors\r\n                                ? <div className={`${ls.errorBlock} ${s.formErrors}`}>\r\n                                    {status.errors.map((e: string, index: number) => {\r\n                                        return <div key={index} className={ls.error}>{e}</div>\r\n                                    })}\r\n                                </div>\r\n                                : null\r\n                            }\r\n\r\n                            <div className={`${ls.buttonBlock} ${s.button}`}>\r\n                                <button className={ls.loginButton} type={'submit'}>\r\n                                    Save Changes\r\n                                </button>\r\n                            </div>\r\n\r\n                        </Form>\r\n                    )\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileDataForm;","import s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../Preloader/Preloader\";\r\nimport React, {useState} from \"react\";\r\nimport ProfileData from \"../ProfileData/ProfileData\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\nimport ProfileDataForm from \"../ProfileDataForm/ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType, setStatus: (status: any) => void) => void\r\n}\r\n\r\nconst ProfileInfo = ({profile, savePhoto, saveProfile, isOwner, status, updateStatus}: ProfileInfoPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    if (!profile) return <Preloader/>\r\n\r\n    const submit = async (formData: ProfileType, setStatus: (status: any) => void) => {\r\n        await saveProfile(formData, setStatus)\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        <div className={s.userInfo}>\r\n\r\n            {\r\n                editMode\r\n                    ? <ProfileDataForm profile={profile} submit={submit}/>\r\n                    : <ProfileData profile={profile} activateEditMode={() => setEditMode(true)}\r\n                                   isOwner={isOwner}/>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__6EdvY\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MyPost_title__U5GPB\",\"post\":\"MyPost_post__mJkyw\",\"postText\":\"MyPost_postText__Q4PC-\",\"likes\":\"MyPost_likes__CMh0Q\"};","import React from 'react';\r\nimport s from \"./MyPost.module.css\"\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport {accentColor} from \"../../../../constants\";\r\n\r\ntype MyPostPropsType = {\r\n    message: string,\r\n    likesCount: number,\r\n    title: string\r\n}\r\n\r\nconst MyPost = ({message, likesCount, title}: MyPostPropsType) => {\r\n\r\n    return <div className={s.post}>\r\n        <div className={s.title}>{title}</div>\r\n        <p className={s.postText}>{message}</p>\r\n        <div className={s.likes}>\r\n            <FavoriteIcon sx={{color: accentColor}}/> <span> {likesCount}</span>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default MyPost;","import React from 'react';\r\nimport {Field, useFormik} from \"formik\";\r\nimport {textareaValidator} from \"../../../../utils/validators\";\r\nimport cs from \"../../../common/common.module.css\";\r\nimport ps from \"../../ProfileDataForm/ProfileDataForm.module.css\";\r\nimport {toggleFocus} from \"../../../../utils/forms\";\r\nimport {accentColor, elementBgColor} from \"../../../../constants\";\r\nimport {Input, InputAdornment, TextField} from \"@mui/material\";\r\nimport ls from \"../../../Login/Login.module.css\";\r\nimport s from \"../../ProfileDataForm/ProfileDataForm.module.css\";\r\nimport PermIdentityIcon from \"@mui/icons-material/PermIdentity\";\r\n\r\ntype PropsType = {\r\n    submit: (post: string, title: string) => void\r\n}\r\n\r\nconst PostForm: React.FC<PropsType> = ({submit}) => {\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: '',\r\n            title: '',\r\n        },\r\n        validationSchema: textareaValidator('post'),\r\n        onSubmit: values => {\r\n            submit(values.post, values.title);\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <div className={s.item}>\r\n                    <label className={s.label} htmlFor=\"title\">Title:</label>\r\n                    <div className={`${cs.inputBlock} ${s.input}`}\r\n                         onFocus={(e) => toggleFocus(e, accentColor)}\r\n                         onBlur={(e) => toggleFocus(e, elementBgColor)}>\r\n                        <Input className={cs.inputField}\r\n                               type={\"title\"} placeholder={\"Enter post title\"}\r\n                               id=\"title-input\"\r\n                               {...formik.getFieldProps('title')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={s.item}>\r\n                    <label className={s.label} htmlFor=\"title\">Post:</label>\r\n                    <div id={'post-input-block'} className={`${cs.inputBlock} ${s.input}`}\r\n                         onFocus={(e) => toggleFocus(e, accentColor)}\r\n                         onBlur={(e) => toggleFocus(e, elementBgColor)}>\r\n                        <TextField className={cs.inputField}\r\n                                   type={\"post\"} placeholder={\"Enter your post\"}\r\n                                   id=\"post-input\"\r\n                                   multiline\r\n                                   maxRows={20}\r\n                                   {...formik.getFieldProps('post')}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {/*{formik.errors.post ?*/}\r\n                {/*    <div style={{color: 'red'}}>{formik.errors.post}</div> : null}*/}\r\n\r\n\r\n                <div className={`${ls.buttonBlock} ${ps.button}`}>\r\n                    <button className={ls.loginButton} type={'submit'}>\r\n                        Add post\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PostForm;","import s from \"./MyPosts.module.css\";\r\nimport MyPost from \"./Post/MyPost\";\r\nimport {PostType} from \"./MyPostsContainer\";\r\nimport PostForm from \"./Post/PostForm\";\r\n\r\ntype PropsType = {\r\n    addPost: (post: string, title: string) => void,\r\n    posts: PostType[],\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n    const {addPost, posts} = props;\r\n\r\n    let myPostElements = posts.map(post =>\r\n        <MyPost key={post.id} message={post.message} likesCount={post.likesCount} title={post.title}/>\r\n    );\r\n\r\n    const sumbit = (post: string, title: string) => {\r\n        addPost(post, title);\r\n    }\r\n\r\n    return (<>\r\n            <div>\r\n                <p>New post</p>\r\n                <PostForm submit={sumbit}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {myPostElements}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from '../../../state/reducers/profileReducer';\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../state/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport type PostType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number,\r\n    title: string,\r\n}\r\n\r\ntype MapStateToProps = {\r\n    posts: PostType[],\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (post: string, title: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profileReducer.posts,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (post: string, title: string) => {\r\n            dispatch(addPostActionCreator(post, title));\r\n        },\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"file\":\"Avatar_file__nTm5e\",\"userAvatar\":\"Avatar_userAvatar__Yy4q+\",\"avatar\":\"Avatar_avatar__hugrn\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__OsgcT\",\"statusInput\":\"ProfileStatus_statusInput__GlKmV\",\"profileStatus\":\"ProfileStatus_profileStatus__I1Jwq\"};","import React, {ChangeEvent, FocusEvent, useEffect, useState} from 'react'\r\nimport s from './ProfileStatus.module.css'\r\nimport cs from \"../../common/common.module.css\";\r\nimport {toggleFocus} from \"../../../utils/forms\";\r\nimport {accentColor, elementBgColor} from \"../../../constants\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [statusValue, setStatusValue] = useState<string>(props.status)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setStatusValue(props.status)\r\n    }\r\n    const deactivateEditMode = (e: FocusEvent<HTMLDivElement>) => {\r\n        toggleFocus(e, elementBgColor)\r\n        setEditMode(false)\r\n        props.updateStatus(statusValue)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setStatusValue(props.status)\r\n    }, [])\r\n\r\n    const updateStatusValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatusValue(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.profileStatus}>\r\n            {\r\n                !editMode\r\n                    ? <div className={s.status}>\r\n                        <span onDoubleClick={activateEditMode}>{props.status}</span>\r\n                    </div>\r\n                    // : <div>\r\n                    //     <input autoFocus={true} onBlur={deactivateEditMode} value={statusValue}\r\n                    //            onChange={updateStatusValue}\r\n                    //     />\r\n                    // </div>\r\n                    : <div id={'status-input-block'} className={`${cs.inputBlock} ${s.statusInput}`}\r\n                           onFocus={(e) => toggleFocus(e, accentColor)}\r\n                           onBlur={(e) => deactivateEditMode(e)}>\r\n                        <TextField className={cs.inputField}\r\n                                   id={\"status\"}\r\n                                   value={statusValue}\r\n                                   multiline\r\n                                   maxRows={5}\r\n                                   onChange={updateStatusValue}\r\n                                   autoFocus={true}\r\n                        />\r\n                    </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileStatus;\r\n\r\n\r\n\r\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgEditPoint(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#838daa\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    d: \"m5 16l-1 4l4-1L19.586 7.414a2 2 0 0 0 0-2.828l-.172-.172a2 2 0 0 0-2.828 0zM15 6l3 3m-5 11h8\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEditPoint);\nexport default __webpack_public_path__ + \"static/media/editPoint.5a22b5d21f3c4dbce102b4c096f68131.svg\";\nexport { ForwardRef as ReactComponent };","import React, {ChangeEvent} from 'react';\r\nimport s from \"./Avatar.module.css\";\r\nimport userPhoto from \"../../../asets/images/avatar.jpg\";\r\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\r\nimport editPoint from \"../../../asets/images/editPoint.svg\";\r\nimport {ProfileType} from \"../ProfileContainer\";\r\n\r\ntype AvatarPropsType = {\r\n    savePhoto: (file: File) => void,\r\n    isOwner: boolean,\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n}\r\n\r\nconst Avatar = ({savePhoto, isOwner, profile, status, updateStatus}: AvatarPropsType) => {\r\n    let fileStyle = s.file\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.userAvatar}>\r\n            <div className={s.avatar}>\r\n                <img src={profile?.photos?.large || userPhoto}\r\n                     alt=\"\"/>\r\n                {isOwner && <input type={'file'} className={fileStyle} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n\r\n            <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n\r\n            <div className={s.edit}><img src={editPoint} alt=\"\"/></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Avatar;","// extracted by mini-css-extract-plugin\nexport default {\"profileData\":\"Profile_profileData__gqURe\",\"css-19kzrtu\":\"Profile_css-19kzrtu__w6IBy\"};","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\nimport React, {useState} from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport Typography from '@mui/material/Typography';\r\nimport Avatar from \"./Avatar/Avatar\";\r\nimport s from './Profile.module.css'\r\nimport PermIdentityIcon from '@mui/icons-material/PermIdentity';\r\nimport ArticleIcon from '@mui/icons-material/Article';\r\nimport {accentColor} from \"../../constants\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: null | ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType, setStatus: (status: any) => void) => void\r\n}\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: number;\r\n    value: number;\r\n}\r\n\r\nfunction CustomTabPanel(props: TabPanelProps) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`simple-tabpanel-${index}`}\r\n            aria-labelledby={`simple-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && (\r\n                <Box sx={{p: 3}}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Profile = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfilePropsType) => {\r\n    const [value, setValue] = useState(0);\r\n\r\n    const handleChange = (event: React.SyntheticEvent, newValue: number) => {\r\n        setValue(newValue);\r\n    }\r\n\r\n    return (\r\n        <main>\r\n            <Avatar savePhoto={savePhoto} isOwner={isOwner} profile={profile} status={status}\r\n                    updateStatus={updateStatus}/>\r\n\r\n            <div className={s.profileData}>\r\n                <Box sx={{width: '100%'}}>\r\n                    <Box sx={{borderBottom: 1, borderColor: 'divider', color: accentColor}}>\r\n                        <Tabs value={value} onChange={handleChange} aria-label=\"icon label tabs example\"\r\n                              TabIndicatorProps={{sx:{backgroundColor: accentColor}}}\r\n                              sx={{\r\n                                  \"& button\": {color: accentColor},\r\n                                  \"& button.Mui-selected\": {color: accentColor},\r\n                                  \"& button:focus\": {color: accentColor},\r\n                              }}>\r\n                            <Tab icon={<PermIdentityIcon/>} label=\"PROFILE\" />\r\n                            <Tab icon={<ArticleIcon/>} label=\"POSTS\" />\r\n                        </Tabs>\r\n                    </Box>\r\n                    <CustomTabPanel value={value} index={0}>\r\n                        <ProfileInfo profile={profile} status={status} updateStatus={updateStatus}\r\n                                     isOwner={isOwner}\r\n                                     savePhoto={savePhoto}\r\n                                     saveProfile={saveProfile}/>\r\n                    </CustomTabPanel>\r\n                    <CustomTabPanel value={value} index={1}>\r\n                        <MyPostsContainer/>\r\n                    </CustomTabPanel>\r\n                </Box>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default Profile;","import {useEffect} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getProfileTC,\r\n    getStatusTC,\r\n    PhotosType,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatusTC\r\n} from \"../../state/reducers/profileReducer\";\r\nimport {RouteComponentProps, useParams, withRouter} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../state/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {UserIdType} from \"../../state/reducers/authReducer\";\r\n\r\n\r\nexport type ContactsType = {\r\n    facebook: string | null,\r\n    website: string | null,\r\n    vk: string | null,\r\n    twitter: string | null,\r\n    instagram: string | null,\r\n    youtube: string | null,\r\n    github: string | null,\r\n    mainLink: string | null\r\n}\r\n\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string | null,\r\n    fullName: string,\r\n    userId: number | undefined,\r\n    photos?: PhotosType;\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType,\r\n    status: string,\r\n    authUserId: UserIdType,\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfileTC: (userId: string) => void,\r\n    getStatusTC: (userId: string) => void,\r\n    updateStatusTC: (status: string) => void,\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: ProfileType,  setStatus: (status: any) => void) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string | undefined\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & PropsType\r\n\r\nconst ProfileContainer = (props: ProfileContainerPropsType) => {\r\n    // console.log('ProfileContainer')\r\n    const params = useParams<{ userId: string }>();\r\n\r\n    useEffect(() => {\r\n        let userId = params.userId;\r\n\r\n        if (!userId) {\r\n            userId = `${props.authUserId}`\r\n\r\n            if (!props.authUserId) {\r\n                props.history.push('/login')\r\n            }\r\n        }\r\n        props.getProfileTC(userId)\r\n        props.getStatusTC(userId)\r\n    }, [params.userId])\r\n\r\n    // if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n\r\n        <div>\r\n            <Profile {...props}\r\n                     isOwner={!!props.match.params.userId}\r\n                     profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatusTC}\r\n                     savePhoto={props.savePhoto}\r\n                     saveProfile={props.saveProfile}/>\r\n        </div>\r\n    );\r\n};\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profileReducer.profile,\r\n    status: state.profileReducer.status,\r\n    authUserId: state.authReducer.userId,\r\n    isAuth: state.authReducer.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfileTC, getStatusTC, updateStatusTC, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer)\r\n"],"names":["contactTitle","contactValue","profile","isOwner","activateEditMode","className","s","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","colSpan","contacts","Object","keys","map","key","onClick","src","edit","alt","submit","initialValues","userId","onSubmit","values","actions","setStatus","errors","touched","status","handleChange","errorsList","createErrorsObject","e","el","toLowerCase","includes","htmlFor","id","cs","onFocus","toggleFocus","accentColor","onBlur","elementBgColor","type","name","placeholder","FormControlLabel","control","Checkbox","defaultChecked","checked","onChange","sx","color","iconColor","backgroundColor","label","fontSize","TextField","value","multiline","maxRows","length","index","ls","saveProfile","savePhoto","updateStatus","useState","editMode","setEditMode","Preloader","formData","message","likesCount","title","Favorite","formik","useFormik","post","validationSchema","textareaValidator","resetForm","handleSubmit","Input","getFieldProps","ps","props","addPost","myPostElements","posts","connect","state","profileReducer","dispatch","addPostActionCreator","MyPosts","statusValue","setStatusValue","useEffect","deactivateEditMode","target","autoFocus","onDoubleClick","fileStyle","photos","large","userPhoto","files","editPoint","CustomTabPanel","children","other","role","hidden","Box","p","Typography","setValue","width","borderBottom","borderColor","Tabs","event","newValue","TabIndicatorProps","Tab","icon","PermIdentity","Article","compose","authUserId","authReducer","isAuth","getProfileTC","getStatusTC","updateStatusTC","withRouter","params","useParams","history","push","match"],"sourceRoot":""}
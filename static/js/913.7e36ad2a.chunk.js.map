{"version":3,"file":"static/js/913.7e36ad2a.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/Contacts/Contact.tsx","webpack://samurai-way/./src/components/Profile/ProfileData/ProfileData.module.css?a227","asets/images/edit.svg","components/Profile/ProfileData/ProfileData.tsx","webpack://samurai-way/./src/components/Profile/ProfileDataForm/ProfileDataForm.module.css?dd16","components/Profile/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/MyPost.module.css?4339","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/Post/PostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://samurai-way/./src/components/Profile/Avatar/Avatar.module.css?e036","webpack://samurai-way/./src/components/Profile/ProfileStatus/ProfileStatus.module.css?1f32","components/Profile/ProfileStatus/ProfileStatus.tsx","asets/images/editPoint.svg","components/Profile/Avatar/Avatar.tsx","webpack://samurai-way/./src/components/Profile/Profile.module.css?b512","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__WvIkr\",\"img\":\"ProfileInfo_img__sOWJz\",\"edit\":\"ProfileInfo_edit__pO3h5\"};","type ContactPropsType = {\n  contactTitle: string | null;\n  contactValue: string | null;\n};\n\nconst Contact = ({ contactTitle, contactValue }: ContactPropsType) => {\n  return (\n    <tr>\n      <td>{contactTitle}: </td> <td>{contactValue}</td>\n    </tr>\n  );\n};\n\nexport default Contact;\n","// extracted by mini-css-extract-plugin\nexport default {\"userInfo\":\"ProfileData_userInfo__6Mdf2\",\"edit\":\"ProfileData_edit__cWAkh\"};","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgEdit(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    fill: \"none\",\n    stroke: \"#838daa\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7 7H6a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2-2v-1\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.385 6.585a2.1 2.1 0 0 0-2.97-2.97L9 12v3h3zM16 5l3 3\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEdit);\nexport default __webpack_public_path__ + \"static/media/edit.b96db9c8079a9d0f5502e0804b93b4c7.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport Contact from \"../Contacts/Contact\";\nimport { ContactsType, ProfileType } from \"../ProfileContainer\";\nimport s from \"./ProfileData.module.css\";\nimport edit from \"../../../asets/images/edit.svg\";\n\ntype ProfileDataType = {\n  profile: ProfileType | null;\n  isOwner: boolean;\n  activateEditMode: () => void;\n};\n\nconst ProfileData = ({ profile, isOwner, activateEditMode }: ProfileDataType) => {\n  return (\n    <div className={s.userInfo}>\n      <table>\n        <tr>\n          <td>Full name:</td>\n          <td>{profile?.fullName}</td>\n        </tr>\n        <tr>\n          <td>Looking for a job:</td>\n          <td>{profile?.lookingForAJob ? \"yes\" : \"no\"}</td>\n        </tr>\n        <tr>\n          <td>My professional skills:</td>\n          <td>{profile?.lookingForAJobDescription}</td>\n        </tr>\n        <tr>\n          <td>About me:</td>\n          <td>{profile?.aboutMe}</td>\n        </tr>\n        <tr>\n          <td colSpan={2}>\n            <b>Contacts</b>\n          </td>\n        </tr>\n        {profile?.contacts &&\n          Object.keys(profile.contacts).map((key) => (\n            <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\n          ))}\n      </table>\n      <div>\n        {isOwner && (\n          <div>\n            <button className={s.edit} onClick={activateEditMode}>\n              <img src={edit} alt=\"\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileData;\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"ProfileDataForm_checkbox__q2iYW\",\"formErrors\":\"ProfileDataForm_formErrors__2zuLP\",\"label\":\"ProfileDataForm_label__nw7wG\",\"item\":\"ProfileDataForm_item__LTiRE\",\"input\":\"ProfileDataForm_input__ul3JR\",\"button\":\"ProfileDataForm_button__+8Sdm\",\"contacts\":\"ProfileDataForm_contacts__VQOet\"};","import {ProfileType} from \"../ProfileContainer\";\nimport {Field, Form, Formik} from \"formik\";\nimport React from \"react\";\nimport {createErrorsObject} from \"utils/object-helpers\";\nimport cs from \"../../common/common.module.css\";\nimport {toggleFocus} from \"utils/forms\";\nimport {accentColor, elementBgColor, iconColor} from \"../../../constants\";\nimport s from \"../ProfileDataForm/ProfileDataForm.module.css\";\nimport {Checkbox, FormControlLabel, TextField} from \"@mui/material\";\nimport ls from \"../../Login/Login.module.css\";\n\n\ntype ProfileDataFormPropsType = {\n  profile: ProfileType;\n  submit: (values: ProfileType, setStatus: (status: any) => void) => void;\n};\n\nconst ProfileDataForm = ({ profile, submit }: ProfileDataFormPropsType) => {\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          userId: profile.userId,\n          contacts: profile.contacts,\n          fullName: profile.fullName || \"\",\n          lookingForAJob: profile.lookingForAJob,\n          lookingForAJobDescription: profile.lookingForAJobDescription || \"\",\n          aboutMe: profile.aboutMe || \"\",\n        }}\n        onSubmit={(values: ProfileType, actions) => {\n          submit(values as ProfileType, actions.setStatus);\n          // actions.resetForm()\n        }}\n      >\n        {({ errors, touched, status, values, handleChange }) => {\n          let errorsList = createErrorsObject(profile);\n\n          status?.errors.map((e: string) => {\n            errorsList.map((el) => {\n              e.toLowerCase().includes(el.toLowerCase());\n            });\n          });\n\n          return (\n            <Form>\n              <div className={s.item}>\n                <label className={s.label} htmlFor=\"fullName\">\n                  Full name:\n                </label>\n\n                <div\n                  id=\"user-input-block\"\n                  className={`${cs.inputBlock} ${s.input}`}\n                  onFocus={(e) => toggleFocus(e, accentColor)}\n                  onBlur={(e) => toggleFocus(e, elementBgColor)}\n                >\n                  <Field\n                    id=\"fullName\"\n                    className={cs.inputField}\n                    type=\"text\"\n                    name=\"fullName\"\n                    placeholder={\"Enter user name\"}\n                  />\n                </div>\n\n              </div>\n\n              <div className={s.item}>\n                <label className={s.label} htmlFor=\"lookingForAJob\">\n                  Looking for a job:{\" \"}\n                </label>\n                <div className={s.checkbox}>\n\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        defaultChecked\n                        name=\"lookingForAJob\"\n                        id=\"lookingForAJob\"\n                        checked={values.lookingForAJob}\n                        onChange={handleChange}\n                        sx={{\n                          color: iconColor,\n                          \"&.Mui-checked\": {\n                            color: elementBgColor,\n                            backgroundColor: accentColor,\n                          },\n                        }}\n                      />\n                    }\n                    label=\"\"\n                    sx={{ \"& .MuiSvgIcon-root\": { fontSize: 23 } }}\n                  />\n                </div>\n              </div>\n\n              <div className={s.item}>\n                <label className={s.label} htmlFor=\"lookingForAJobDescription\">\n                  My professional skills:{\" \"}\n                </label>\n\n                <div\n                  id={\"skills-input-block\"}\n                  className={`${cs.inputBlock} ${s.input}`}\n                  onFocus={(e) => toggleFocus(e, accentColor)}\n                  onBlur={(e) => toggleFocus(e, elementBgColor)}\n                >\n                  <TextField\n                    className={cs.inputField}\n                    placeholder={\"Enter your skills\"}\n                    id={\"lookingForAJobDescription\"}\n                    value={values.lookingForAJobDescription}\n                    multiline\n                    maxRows={10}\n                    name={\"lookingForAJobDescription\"}\n                    onChange={handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className={s.item}>\n                <label className={s.label} htmlFor=\"aboutMe\">\n                  About me:{\" \"}\n                </label>\n\n                <div\n                  id={\"about-input-block\"}\n                  className={`${cs.inputBlock} ${s.input}`}\n                  onFocus={(e) => toggleFocus(e, accentColor)}\n                  onBlur={(e) => toggleFocus(e, elementBgColor)}\n                >\n                  <TextField\n                    className={cs.inputField}\n                    placeholder={\"Enter your skills\"}\n                    id={\"aboutMe\"}\n                    value={values.aboutMe}\n                    multiline\n                    maxRows={10}\n                    name={\"aboutMe\"}\n                    onChange={handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className={s.contacts}>\n                Contacts:\n                {profile.contacts &&\n                  Object.keys(profile.contacts).length > 0 &&\n                  Object.keys(profile.contacts).map((key, index) => (\n                    <div key={index} className={s.item}>\n                      <label className={s.label} htmlFor={`${key}`}>\n                        {key}:{\" \"}\n                      </label>\n\n                      <div\n                        key={index}\n                        className={`${cs.inputBlock} ${s.input} `}\n                        onFocus={(e) => toggleFocus(e, accentColor)}\n                        onBlur={(e) => toggleFocus(e, elementBgColor)}\n                      >\n                        <Field\n                          id={`${key}`}\n                          className={cs.inputField}\n                          type=\"text\"\n                          name={`contacts.${key}`}\n                          placeholder={\"Enter your contact\"}\n                        />\n                      </div>\n                    </div>\n                  ))}\n              </div>\n\n              {status?.errors ? (\n                <div className={`${ls.errorBlock} ${s.formErrors}`}>\n                  {status.errors.map((e: string, index: number) => {\n                    return (\n                      <div key={index} className={ls.error}>\n                        {e}\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : null}\n\n              <div className={`${ls.buttonBlock} ${s.button}`}>\n                <button className={ls.loginButton} type={\"submit\"}>\n                  Save Changes\n                </button>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default ProfileDataForm;\n","import s from \"./ProfileInfo.module.css\";\nimport Preloader from \"../../Preloader/Preloader\";\nimport React, { useState } from \"react\";\nimport ProfileData from \"../ProfileData/ProfileData\";\nimport { ProfileType } from \"../ProfileContainer\";\nimport ProfileDataForm from \"../ProfileDataForm/ProfileDataForm\";\n\ntype ProfileInfoPropsType = {\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n  isOwner: boolean;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType, setStatus: (status: any) => void) => void;\n};\n\nconst ProfileInfo = ({ profile, savePhoto, saveProfile, isOwner, status, updateStatus }: ProfileInfoPropsType) => {\n  let [editMode, setEditMode] = useState<boolean>(false);\n\n  if (!profile) return <Preloader />;\n\n  const submit = async (formData: ProfileType, setStatus: (status: any) => void) => {\n    await saveProfile(formData, setStatus);\n    setEditMode(false);\n  };\n\n  return (\n    <div className={s.userInfo}>\n      {editMode ? (\n        <ProfileDataForm profile={profile} submit={submit} />\n      ) : (\n        <ProfileData profile={profile} activateEditMode={() => setEditMode(true)} isOwner={isOwner} />\n      )}\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"MyPosts_posts__6EdvY\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MyPost_title__U5GPB\",\"post\":\"MyPost_post__mJkyw\",\"postText\":\"MyPost_postText__Q4PC-\",\"likes\":\"MyPost_likes__CMh0Q\"};","import React from \"react\";\nimport s from \"./MyPost.module.css\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport { accentColor } from \"../../../../constants\";\n\ntype MyPostPropsType = {\n  message: string;\n  likesCount: number;\n  title: string;\n};\n\nconst MyPost = ({ message, likesCount, title }: MyPostPropsType) => {\n  return (\n    <div className={s.post}>\n      <div className={s.title}>{title}</div>\n      <p className={s.postText}>{message}</p>\n      <div className={s.likes}>\n        <FavoriteIcon sx={{ color: accentColor }} /> <span> {likesCount}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default MyPost;\n","import React from \"react\";\nimport {useFormik} from \"formik\";\nimport {textareaValidator} from \"utils/validators\";\nimport cs from \"../../../common/common.module.css\";\nimport ps from \"../../ProfileDataForm/ProfileDataForm.module.css\";\nimport s from \"../../ProfileDataForm/ProfileDataForm.module.css\";\nimport {toggleFocus} from \"utils/forms\";\nimport {accentColor, elementBgColor} from \"../../../../constants\";\nimport {Input, TextField} from \"@mui/material\";\nimport ls from \"../../../Login/Login.module.css\";\n\ntype PropsType = {\n  submit: (post: string, title: string) => void;\n};\n\nconst PostForm: React.FC<PropsType> = ({ submit }) => {\n  const formik = useFormik({\n    initialValues: {\n      post: \"\",\n      title: \"\",\n    },\n    validationSchema: textareaValidator(\"post\"),\n    onSubmit: (values) => {\n      submit(values.post, values.title);\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <div className={s.item}>\n          <label className={s.label} htmlFor=\"title\">\n            Title:\n          </label>\n          <div\n            className={`${cs.inputBlock} ${s.input}`}\n            onFocus={(e) => toggleFocus(e, accentColor)}\n            onBlur={(e) => toggleFocus(e, elementBgColor)}\n          >\n            <Input\n              className={cs.inputField}\n              type={\"title\"}\n              placeholder={\"Enter post title\"}\n              id=\"title-input\"\n              {...formik.getFieldProps(\"title\")}\n            />\n          </div>\n        </div>\n\n        <div className={s.item}>\n          <label className={s.label} htmlFor=\"title\">\n            Post:\n          </label>\n          <div\n            id={\"post-input-block\"}\n            className={`${cs.inputBlock} ${s.input}`}\n            onFocus={(e) => toggleFocus(e, accentColor)}\n            onBlur={(e) => toggleFocus(e, elementBgColor)}\n          >\n            <TextField\n              className={cs.inputField}\n              type={\"post\"}\n              placeholder={\"Enter your post\"}\n              id=\"post-input\"\n              multiline\n              maxRows={20}\n              {...formik.getFieldProps(\"post\")}\n            />\n          </div>\n        </div>\n\n        <div className={`${ls.buttonBlock} ${ps.button}`}>\n          <button className={ls.loginButton} type={\"submit\"}>\n            Add post\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default PostForm;\n","import s from \"./MyPosts.module.css\";\nimport MyPost from \"./Post/MyPost\";\nimport { PostType } from \"./MyPostsContainer\";\nimport PostForm from \"./Post/PostForm\";\n\ntype PropsType = {\n  addPost: (post: string, title: string) => void;\n  posts: PostType[];\n};\n\nconst MyPosts: React.FC<PropsType> = (props) => {\n  const { addPost, posts } = props;\n\n  let myPostElements = posts.map((post) => (\n    <MyPost key={post.id} message={post.message} likesCount={post.likesCount} title={post.title} />\n  ));\n\n  const sumbit = (post: string, title: string) => {\n    addPost(post, title);\n  };\n\n  return (\n    <>\n      <div>\n        <p>New post</p>\n        <PostForm submit={sumbit} />\n      </div>\n      <div className={s.posts}>{myPostElements}</div>\n    </>\n  );\n};\n\nexport default MyPosts;\n","import { addPostActionCreator } from \"../../../state/reducers/profileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from \"../../../state/redux-store\";\nimport { Dispatch } from \"redux\";\n\nexport type PostType = {\n  id: number;\n  message: string;\n  likesCount: number;\n  title: string;\n};\n\ntype MapStateToProps = {\n  posts: PostType[];\n};\n\ntype MapDispatchToPropsType = {\n  addPost: (post: string, title: string) => void;\n};\n\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\n  return {\n    posts: state.profileReducer.posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n  return {\n    addPost: (post: string, title: string) => {\n      dispatch(addPostActionCreator(post, title));\n    },\n  };\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"file\":\"Avatar_file__nTm5e\",\"userAvatar\":\"Avatar_userAvatar__Yy4q+\",\"avatar\":\"Avatar_avatar__hugrn\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__OsgcT\",\"statusInput\":\"ProfileStatus_statusInput__GlKmV\",\"profileStatus\":\"ProfileStatus_profileStatus__I1Jwq\"};","import React, { ChangeEvent, FocusEvent, useEffect, useState } from \"react\";\nimport s from \"./ProfileStatus.module.css\";\nimport cs from \"../../common/common.module.css\";\nimport { toggleFocus } from \"utils/forms\";\nimport { accentColor, elementBgColor } from \"../../../constants\";\nimport { TextField } from \"@mui/material\";\n\ntype ProfileStatusPropsType = {\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\nconst ProfileStatus = (props: ProfileStatusPropsType) => {\n  let [editMode, setEditMode] = useState<boolean>(false);\n  let [statusValue, setStatusValue] = useState<string>(props.status);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setStatusValue(props.status);\n  };\n  const deactivateEditMode = (e: FocusEvent<HTMLDivElement>) => {\n    toggleFocus(e, elementBgColor);\n    setEditMode(false);\n    props.updateStatus(statusValue);\n  };\n\n  useEffect(() => {\n    setStatusValue(props.status);\n  }, []);\n\n  const updateStatusValue = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatusValue(e.target.value);\n  };\n\n  return (\n    <div className={s.profileStatus}>\n      {!editMode ? (\n        <div className={s.status}>\n          <span onDoubleClick={activateEditMode}>{props.status}</span>\n        </div>\n      ) : (\n\n        <div\n          id={\"status-input-block\"}\n          className={`${cs.inputBlock} ${s.statusInput}`}\n          onFocus={(e) => toggleFocus(e, accentColor)}\n          onBlur={(e) => deactivateEditMode(e)}\n        >\n          <TextField\n            className={cs.inputField}\n            id={\"status\"}\n            value={statusValue}\n            multiline\n            maxRows={5}\n            onChange={updateStatusValue}\n            autoFocus={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatus;\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgEditPoint(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"1em\",\n    height: \"1em\",\n    viewBox: \"0 0 24 24\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    stroke: \"#838daa\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    d: \"m5 16l-1 4l4-1L19.586 7.414a2 2 0 0 0 0-2.828l-.172-.172a2 2 0 0 0-2.828 0zM15 6l3 3m-5 11h8\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgEditPoint);\nexport default __webpack_public_path__ + \"static/media/editPoint.5a22b5d21f3c4dbce102b4c096f68131.svg\";\nexport { ForwardRef as ReactComponent };","import React, {ChangeEvent} from \"react\";\nimport s from \"./Avatar.module.css\";\nimport userPhoto from \"../../../asets/images/avatar.jpg\";\nimport ProfileStatus from \"../ProfileStatus/ProfileStatus\";\nimport editPoint from \"../../../asets/images/editPoint.svg\";\nimport {ProfileType} from \"../ProfileContainer\";\nimport Tooltip from \"@mui/material/Tooltip\";\n\ntype AvatarPropsType = {\n  savePhoto: (file: File) => void;\n  isOwner: boolean;\n  profile: ProfileType | null;\n  status: string;\n  updateStatus: (status: string) => void;\n};\n\nconst Avatar = ({ savePhoto, isOwner, profile, status, updateStatus }: AvatarPropsType) => {\n  let fileStyle = s.file;\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      savePhoto(e.target.files[0]);\n    }\n  };\n\n  return (\n    <div className={s.userAvatar}>\n      <div className={s.avatar}>\n        <img src={profile?.photos?.large || userPhoto} alt=\"\" />\n        {isOwner && <input type={\"file\"} className={fileStyle} onChange={onMainPhotoSelected} />}\n      </div>\n\n      <ProfileStatus status={status} updateStatus={updateStatus} />\n\n      <div className={s.edit}>\n        <Tooltip disableFocusListener disableTouchListener title=\"Double click on the text to change the status\">\n          <img src={editPoint} alt=\"\" />\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n\nexport default Avatar;\n","// extracted by mini-css-extract-plugin\nexport default {\"profileData\":\"Profile_profileData__gqURe\",\"css-19kzrtu\":\"Profile_css-19kzrtu__w6IBy\"};","import ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport { ProfileType } from \"./ProfileContainer\";\nimport React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Typography from \"@mui/material/Typography\";\nimport Avatar from \"./Avatar/Avatar\";\nimport s from \"./Profile.module.css\";\nimport PermIdentityIcon from \"@mui/icons-material/PermIdentity\";\nimport ArticleIcon from \"@mui/icons-material/Article\";\nimport { accentColor } from \"../../constants\";\n\ntype ProfilePropsType = {\n  profile: null | ProfileType;\n  status: string;\n  updateStatus: (status: string) => void;\n  isOwner: boolean;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType, setStatus: (status: any) => void) => void;\n};\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nfunction CustomTabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nconst Profile = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }: ProfilePropsType) => {\n  const [value, setValue] = useState(0);\n\n  const handleChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  return (\n    <main>\n      <Avatar savePhoto={savePhoto} isOwner={isOwner} profile={profile} status={status} updateStatus={updateStatus} />\n\n      <div className={s.profileData}>\n        <Box sx={{ width: \"100%\" }}>\n          <Box sx={{ borderBottom: 1, borderColor: \"divider\", color: accentColor }}>\n            <Tabs\n              value={value}\n              onChange={handleChange}\n              aria-label=\"icon label tabs example\"\n              TabIndicatorProps={{ sx: { backgroundColor: accentColor } }}\n              sx={{\n                \"& button\": { color: accentColor },\n                \"& button.Mui-selected\": { color: accentColor },\n                \"& button:focus\": { color: accentColor },\n              }}\n            >\n              <Tab icon={<PermIdentityIcon />} label=\"PROFILE\" />\n              <Tab icon={<ArticleIcon />} label=\"POSTS\" />\n            </Tabs>\n          </Box>\n          <CustomTabPanel value={value} index={0}>\n            <ProfileInfo\n              profile={profile}\n              status={status}\n              updateStatus={updateStatus}\n              isOwner={isOwner}\n              savePhoto={savePhoto}\n              saveProfile={saveProfile}\n            />\n          </CustomTabPanel>\n          <CustomTabPanel value={value} index={1}>\n            <MyPostsContainer />\n          </CustomTabPanel>\n        </Box>\n      </div>\n    </main>\n  );\n};\n\nexport default Profile;\n","import { useEffect } from \"react\";\nimport Profile from \"./Profile\";\nimport { connect } from \"react-redux\";\nimport {\n  getProfileTC,\n  getStatusTC,\n  PhotosType,\n  savePhoto,\n  saveProfile,\n  updateStatusTC,\n} from \"state/reducers/profileReducer\";\nimport { RouteComponentProps, useParams, withRouter } from \"react-router-dom\";\nimport { AppStateType } from \"state/redux-store\";\nimport { compose } from \"redux\";\nimport { UserIdType } from \"state/reducers/authReducer\";\n\nexport type ContactsType = {\n  facebook: string | null;\n  website: string | null;\n  vk: string | null;\n  twitter: string | null;\n  instagram: string | null;\n  youtube: string | null;\n  github: string | null;\n  mainLink: string | null;\n};\n\nexport type ProfileType = {\n  aboutMe: string | null;\n  contacts: ContactsType;\n  lookingForAJob: boolean;\n  lookingForAJobDescription: string | null;\n  fullName: string;\n  userId: number | undefined;\n  photos?: PhotosType;\n};\n\ntype MapStatePropsType = {\n  profile: ProfileType;\n  status: string;\n  authUserId: UserIdType;\n  isAuth: boolean;\n};\n\ntype MapDispatchPropsType = {\n  getProfileTC: (userId: string) => void;\n  getStatusTC: (userId: string) => void;\n  updateStatusTC: (status: string) => void;\n  savePhoto: (file: File) => void;\n  saveProfile: (profile: ProfileType, setStatus: (status: any) => void) => void;\n};\n\ntype PathParamsType = {\n  userId: string | undefined;\n};\n\ntype PropsType = MapStatePropsType & MapDispatchPropsType;\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & PropsType;\n\nconst ProfileContainer = (props: ProfileContainerPropsType) => {\n  const params = useParams<{ userId: string }>();\n\n  useEffect(() => {\n    let userId = params.userId;\n\n    if (!userId) {\n      userId = `${props.authUserId}`;\n\n      if (!props.authUserId) {\n        props.history.push(\"/login\");\n      }\n    }\n    props.getProfileTC(userId);\n    props.getStatusTC(userId);\n  }, [params.userId]);\n\n  // if (!isAuth) return <Redirect to={'/login'}/>\n\n  return (\n    <div>\n      <Profile\n        {...props}\n        isOwner={!!props.match.params.userId}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatusTC}\n        savePhoto={props.savePhoto}\n        saveProfile={props.saveProfile}\n      />\n    </div>\n  );\n};\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n  profile: state.profileReducer.profile,\n  status: state.profileReducer.status,\n  authUserId: state.authReducer.userId,\n  isAuth: state.authReducer.isAuth,\n});\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, { getProfileTC, getStatusTC, updateStatusTC, savePhoto, saveProfile }),\n  withRouter,\n)(ProfileContainer);\n"],"names":["contactTitle","contactValue","profile","isOwner","activateEditMode","className","s","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","colSpan","contacts","Object","keys","map","key","onClick","src","edit","alt","submit","initialValues","userId","onSubmit","values","actions","setStatus","errors","touched","status","handleChange","errorsList","createErrorsObject","e","el","toLowerCase","includes","htmlFor","id","cs","onFocus","toggleFocus","accentColor","onBlur","elementBgColor","type","name","placeholder","FormControlLabel","control","Checkbox","defaultChecked","checked","onChange","sx","color","iconColor","backgroundColor","label","fontSize","TextField","value","multiline","maxRows","length","index","ls","saveProfile","savePhoto","updateStatus","useState","editMode","setEditMode","Preloader","formData","message","likesCount","title","Favorite","formik","useFormik","post","validationSchema","textareaValidator","resetForm","handleSubmit","Input","getFieldProps","ps","props","addPost","myPostElements","posts","connect","state","profileReducer","dispatch","addPostActionCreator","MyPosts","statusValue","setStatusValue","useEffect","deactivateEditMode","target","autoFocus","onDoubleClick","fileStyle","photos","large","userPhoto","files","Tooltip","disableFocusListener","disableTouchListener","editPoint","CustomTabPanel","children","other","role","hidden","Box","p","Typography","setValue","width","borderBottom","borderColor","Tabs","event","newValue","TabIndicatorProps","Tab","icon","PermIdentity","Article","compose","authUserId","authReducer","isAuth","getProfileTC","getStatusTC","updateStatusTC","withRouter","params","useParams","history","push","match"],"sourceRoot":""}